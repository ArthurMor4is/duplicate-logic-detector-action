[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "duplicate-logic-detector-action"
version = "1.0.2"
description = "A GitHub Action that detects duplicate logic in Python code using AST analysis and semantic similarity"
authors = [
    {name = "Arthur Morais", email = "arthurfmmorais@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["duplicate-code", "static-analysis", "github-actions", "code-quality"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "GitPython==3.1.45",
    "PyGithub==2.8.1",
    "scikit-learn==1.7.2",
    "nltk==3.9.1",
    "rich==14.1.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
# Runtime dependencies for GitHub Action (minimal set)
runtime = [
    "rich==14.1.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.scripts]
duplicate-logic-detector = "scripts.duplicate_logic_detector:main"
run-tests = "run_tests:main"

[tool.hatch.build.targets.wheel]
packages = ["scripts"]

[project.urls]
Homepage = "https://github.com/ArthurMor4is/duplicate-logic-detector-action"
Repository = "https://github.com/ArthurMor4is/duplicate-logic-detector-action"
Issues = "https://github.com/ArthurMor4is/duplicate-logic-detector-action/issues"
Documentation = "https://github.com/ArthurMor4is/duplicate-logic-detector-action/wiki"
Changelog = "https://github.com/ArthurMor4is/duplicate-logic-detector-action/blob/main/CHANGELOG.md"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["scripts"]
omit = [
    "tests/*",
    "test_samples/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["scripts"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "git.*",
    "github.*",
    "sklearn.*",
    "nltk.*",
    "numpy.*",
    "pandas.*",
]
ignore_missing_imports = true
