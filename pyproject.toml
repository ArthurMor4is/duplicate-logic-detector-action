[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "duplicate-logic-detector-action"
version = "1.0.2"
description = "A GitHub Action that detects duplicate logic in Python code using AST analysis and semantic similarity"
authors = [
    {name = "Arthur Morais", email = "arthurfmmorais@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["duplicate-code", "static-analysis", "github-actions", "code-quality"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "GitPython==3.1.45",
    "PyGithub==2.8.1",
    "scikit-learn==1.7.2",
    "nltk==3.9.1",
    "rich==14.1.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
]
dev = [
    "ruff>=0.6.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.scripts]
duplicate-logic-detector = "scripts.duplicate_logic_detector:main"
run-tests = "run_tests:main"

[tool.hatch.build.targets.wheel]
packages = ["scripts"]

[project.urls]
Homepage = "https://github.com/ArthurMor4is/duplicate-logic-detector-action"
Repository = "https://github.com/ArthurMor4is/duplicate-logic-detector-action"
Issues = "https://github.com/ArthurMor4is/duplicate-logic-detector-action/issues"
Documentation = "https://github.com/ArthurMor4is/duplicate-logic-detector-action/wiki"
Changelog = "https://github.com/ArthurMor4is/duplicate-logic-detector-action/blob/main/CHANGELOG.md"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["scripts"]
omit = [
    "tests/*",
    "test_samples/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.10+
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",   # Import errors
    "E7",   # Statement errors  
    "E9",   # Runtime errors
    "F",    # Pyflakes
    "W",    # pycodestyle warnings
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "T20",  # flake8-print
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "T201",  # print statements (allowed for this project)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["scripts"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "git.*",
    "github.*",
    "sklearn.*",
    "nltk.*",
    "numpy.*",
    "pandas.*",
]
ignore_missing_imports = true
